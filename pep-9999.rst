PEP: 9999
Title: Use ``as`` to name the condition in ``if`` and ``while`` statements
Author: Juancarlo AÃ±ez <apalala@gmail.com>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 12-Jun-2018
Post-History: 12-Jun-2018


Structure (from PEP-12)::

    First-Level Title
    =================

    Second-Level Title
    ------------------

    Third-Level Title
    '''''''''''''''''


Abstract
========

This PEP introduces the use of the ``as`` keyword to capture the expression serving as condition in ``if`` and ``while`` statements.

The proposed change does not introduce a new kind of expression nor new semantics, but just a way to capture the value of an expression as a _name_ added to the current scope as it is done in the ``with-as`` and ``except-as`` statements.

Rationale
=========

Python's definition of *boolean operations* [BOOL]_ allows for succing yet clear ways of writing conditions for control flow::

    if sum(values):
        print('values do not add to zero')

instead of::

    if sum(values) != 0:
        print('values do not add to zero')

as must be done in many other programming languages.

Also::

    while values:
        x = values.pop()
        print(x)

The default is that any object that is not `None` or *empty* evaluates as to a *true* value when used as a condition. That definition is used to an advantage in many common Python idioms::

    if re.match(r'^\d+-\d+$', identifier): 
        print(f'{identifier} is a valid identifier')

instead of::

    if re.match(r'^\d+-\d+$', identifier) is not None: 
        print(f'{identifier} is a valid identifier')

This proposal allows the use of the ``as`` keyword in ``if`` and ``while`` statements to capture the result of the conditional expression as a name in the current scope::

    if re.match(r'^(\d+)-(\d+)$', identifier) as m:
        print(f'first part is {m.group(1)}')
        print(f'first part is {m.group(2)}')


Iterables and `for`
-------------------


Use Cases
=========

Specification: The ``if-as`` and ``while-as`` Statements
========================================================

Transition Plan
===============

The new syntax does not introduce any conflicts with previous or on-the-works syntax or libraries, so it can be introduced without a transition strategy.

Resolved Issues
===============

Rejected Options
================

Make `as` ane form of assignment expression
-------------------------------------------

Example::

    if not (m := re.match(r'^(\d+)-(\d+)$', identifier):
        raise ValueError('f{identifier} is not a valid identifier')
    print(f'first part is {m.group(1)}')
    print(f'first part is {m.group(2)}')

Another::

    while values and not is_sentinel(v := values.pop()):
        process(v)



Examples
========

Reference Implementation
========================

Acknowledgements
================


References
==========

.. [BOOL] Boolean operations - Python language reference
    (https://docs.python.org/3/reference/expressions.html#boolean-operations)

.. [PEP 572] PEP 572 -- Assignment Expressions, Chris Angelico, Tim Peters, Guido van Rossum
    (https://www.python.org/dev/peps/pep-0572)



Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
